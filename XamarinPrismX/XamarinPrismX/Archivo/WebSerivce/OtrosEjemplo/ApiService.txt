/*
|using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using SIDEC.Common.Models;

namespace SIDEC.Common.Services
{
    public class ApiService : IApiService
    {
        public async Task<Response<object>> GetEncuestasByStatus(string urlBase, string servicePrefix, string controller, string tokenType, string accessToken, int request)
        {
            try
            {
                var data = new EvaluacionRequest { estatus = 2 };
                var requestString = JsonConvert.SerializeObject(data);
                var content = new StringContent(requestString, Encoding.UTF8, "application/json");
                var client = new HttpClient
                {
                    BaseAddress = new Uri(urlBase)
                };
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(tokenType, accessToken);
                var url = $"{servicePrefix}{controller}";
                var response = await client.PostAsync(url, content);
                var result = await response.Content.ReadAsStringAsync();

                if (!response.IsSuccessStatusCode)
                {
                    return new Response<object>
                    {
                        IsSuccess = false,
                        Message = result,
                    };
                }
                var list = JsonConvert.DeserializeObject<List<EvaluacionResponse>>(result);
                return new Response<object>
                {
                    IsSuccess = true,
                    Result = list
                };
            }
            catch (Exception ex)
            {
                return new Response<object>
                {
                    IsSuccess = false,
                    Message = ex.Message
                };
            }
        }

        public async Task<Response<EvaluacionResponse>> SetStatusEncuestas(string urlBase, string servicePrefix, string controller, string tokenType, string accessToken, EvaluacionRequest request)
        {
            try
            {
                var requestString = JsonConvert.SerializeObject(request);
                var content = new StringContent(requestString, Encoding.UTF8, "application/json");
                var client = new HttpClient
                {
                    BaseAddress = new Uri(urlBase)
                };
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(tokenType, accessToken);
                var url = $"{servicePrefix}{controller}";
                var response = await client.PostAsync(url, content);
                var result = await response.Content.ReadAsStringAsync();

                if (!response.IsSuccessStatusCode)
                {
                    return new Response<EvaluacionResponse>
                    {
                        IsSuccess = false,
                        Message = result,
                    };
                }
                var list = JsonConvert.DeserializeObject<EvaluacionResponse>(result);
                return new Response<EvaluacionResponse>
                {
                    IsSuccess = true,
                    Result = list
                };
            }
            catch (Exception ex)
            {
                return new Response<EvaluacionResponse>
                {
                    IsSuccess = false,
                    Message = ex.Message
                };
            }
        }

        public async Task<Response<EvaluacionResponse>> UpdateEncuestaByInasistencia(string urlBase, string servicePrefix, string controller, string tokenType, string accessToken, EvaluacionRequestFirma request)
        {
            try
            {
                var requestString = JsonConvert.SerializeObject(request);
                var content = new StringContent(requestString, Encoding.UTF8, "application/json");
                var client = new HttpClient
                {
                    BaseAddress = new Uri(urlBase)
                };
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(tokenType, accessToken);
                var url = $"{servicePrefix}{controller}";
                var response = await client.PostAsync(url, content);
                var result = await response.Content.ReadAsStringAsync();

                if (!response.IsSuccessStatusCode)
                {
                    return new Response<EvaluacionResponse>
                    {
                        IsSuccess = false,
                        Message = result,
                    };
                }
                var list = JsonConvert.DeserializeObject<EvaluacionResponse>(result);
                return new Response<EvaluacionResponse>
                {
                    IsSuccess = true,
                    Result = list
                };
            }
            catch (Exception ex)
            {
                return new Response<EvaluacionResponse>
                {
                    IsSuccess = false,
                    Message = ex.Message
                };
            }
        }

        public async Task<Response<TokenResponse>> GetTokenAsync(string urlBase, string servicePrefix, string controller, TokenRequest request)
        {
            try
            {
                var content = new StringContent(
                    string.Format("grant_type=password&username={0}&password={1}", request.Username, request.Password), 
                    Encoding.UTF8, 
                    "application/x-www-form-urlencoded"
                    );
                var client = new HttpClient
                {
                    BaseAddress = new Uri(urlBase)
                };

                var response = await client.PostAsync("neuropoligrafia/Token", content);
                //var response = await client.PostAsync("sidec/Token", content);
                //var response = await client.PostAsync("Token", content);
                var result = await response.Content.ReadAsStringAsync();

                if (!response.IsSuccessStatusCode)
                {
                    return new Response<TokenResponse>
                    {
                        IsSuccess = false,
                        Message = result
                    };
                }

                var token = JsonConvert.DeserializeObject<TokenResponse>(result);
                return new Response<TokenResponse>
                {
                    IsSuccess = true,
                    Result = token
                };
            }
            catch (Exception ex)
            {
                return new Response<TokenResponse>
                {
                    IsSuccess = false,
                    Message = ex.Message
                };
            }
        }

        
    }
}
*/